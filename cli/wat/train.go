package wat

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/signal"
	"path/filepath"
	"regexp"
	"sort"
	"strings"
	"time"

	pb "gopkg.in/cheggaaa/pb.v1"

	isatty "github.com/mattn/go-isatty"
	"github.com/spf13/cobra"
	"github.com/windmilleng/wat/os/ospath"
)

const trainRecencyCutoff = time.Hour
const trainTTL = 48 * time.Hour

// Only fuzz files that match this suffix.
// TODO(nick): Will we need to make this configurable?
var fuzzSuffixes = []string{
	".go",
	".js",
}

var matchFalse = regexp.MustCompile("\\bfalse\\b")
var matchZero = regexp.MustCompile("\\b0\\b")

var trainCmd = &cobra.Command{
	Use:   "train",
	Short: "Train a model to make decisions on what to test",
	Run:   train,
}

func train(cmd *cobra.Command, args []string) {
	ctx, cancel := context.WithTimeout(context.Background(), CmdTimeout)
	defer cancel()

	ws, err := GetOrInitWatWorkspace()
	if err != nil {
		Fatal("GetWatWorkspace", err)
	}

	cmds, err := populateAt(ctx, ws)
	if err != nil {
		Fatal("List", err)
	}

	logs, err := Train(ctx, ws, cmds, 0 /* always fresh */)
	if err != nil {
		Fatal("Train", err)
	}

	encoder := json.NewEncoder(os.Stdout)
	encoder.SetIndent("", "  ")
	err = encoder.Encode(logs)
	if err != nil {
		Fatal("Encode", err)
	}
}

// Gets training data.
//
// If sufficiently fresh training data lives on disk, return that data.
// Otherwise, generate new training data and write it to disk.
func Train(ctx context.Context, ws WatWorkspace, cmds []WatCommand, ttl time.Duration) ([]CommandLogGroup, error) {
	if ttl > 0 {
		info, err := ws.Stat(fnameCmdLog)
		if err != nil && !os.IsNotExist(err) {
			return nil, err
		}

		// TODO(nick): This will do training if the user hasn't run wat for a while.
		// It might make sense to be more aggressive about this, e.g., run training
		// if the user hasn't explicitly trained for a while.
		exists := err == nil
		if exists && time.Since(info.ModTime()) < ttl {
			logs, err := ReadCmdLogGroups(ws)
			if err != nil {
				return nil, err
			}
			return logs, nil
		}
	}

	result, err := trainAt(ctx, ws, cmds)
	if err != nil {
		return nil, err
	}

	err = CmdLogGroupsToFile(ws, result)
	if err != nil {
		return nil, err
	}
	return result, nil
}

type LogSource int

const (
	_ = iota

	// An edit made by the user
	LogSourceUser LogSource = iota

	// An made-up command-log used to bootstrap training,
	// so that we have interesting data to work with before the
	// user runs any commands.
	LogSourceBootstrap

	// An edit automatically generated by a fuzzer
	LogSourceFuzz

	// Logs generated when the trainer runs the commands
	// in the workspace for the first time.
	LogSourceTrainInit
)

// All the commands that ran at a particular state of the workspace, grouped together.
type CommandLogGroup struct {
	Logs    []CommandLog
	Context LogContext
}

func newCommandLogGroup(ctx LogContext) *CommandLogGroup {
	return &CommandLogGroup{Context: ctx}
}

func (g *CommandLogGroup) Add(l CommandLog) {
	g.Logs = append(g.Logs, l)
}

type LogContext struct {
	// watRoot-relative paths of files that have been recently edited.
	// The definition of "recent" is deliberately fuzzy and might change.
	RecentEdits []string

	StartTime time.Time
	Source    LogSource
}

type CommandLog struct {
	// The Command field of WatCommand
	Command string

	Success  bool
	Duration time.Duration
}

func trainAt(ctx context.Context, ws WatWorkspace, cmds []WatCommand) ([]CommandLogGroup, error) {
	if isatty.IsTerminal(os.Stdout.Fd()) {
		fmt.Fprintln(os.Stderr, "Beginning training...type Ctrl-C to interrupt")

		var cancel func()
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()

		sigChan := make(chan os.Signal, 1)
		signal.Notify(sigChan, os.Interrupt)
		defer signal.Stop(sigChan)
		go func() {
			for _ = range sigChan {
				cancel()
				break
			}
		}()
	}

	files, err := ws.WalkRoot()
	if err != nil {
		return nil, err
	}
	sort.Sort(sort.Reverse(fileInfos(files)))

	result := make([]CommandLogGroup, 0, len(cmds))

	// First, create a group of the whole pipeline passing.
	result = append(result, newBootstrapGroup(nil, cmds, func(cmd WatCommand) bool { return true }))

	// Next, create a group of only one test failing for each group.
	for _, cmd := range cmds {
		result = append(result, newBootstrapGroup(nil, cmds, func(c WatCommand) bool { return cmd != c }))
	}

	// For each command, and each file that matches that command, we're going to
	// create two groups: one with just that command failing, and one with that
	// command succeeding.  This simulates "breaking" the test deliberately.
	for _, cmd := range cmds {
		matcher, err := ospath.NewMatcherFromPattern(cmd.FilePattern)
		if err != nil {
			log.Printf("Skipping malformed command (%+v): %v\n", cmd, err)
			continue
		}

		for _, f := range files {
			if !matcher.Match(f.name) {
				continue
			}

			edits := []string{f.name}
			result = append(result, newBootstrapGroup(edits, cmds, func(c WatCommand) bool { return true }))
			result = append(result, newBootstrapGroup(edits, cmds, func(c WatCommand) bool { return cmd != c }))
		}
	}

	// Run all commands in the current workspace.
	recentEdit := ""
	if len(files) > 0 && time.Since(files[0].modTime) < trainRecencyCutoff {
		recentEdit = files[0].name
	}
	g, err := runInitGroup(ctx, cmds, ws.Root(), recentEdit)
	if err != nil {
		return nil, err
	}
	if len(g.Logs) != 0 {
		result = append(result, g)
	}

	// Fuzz each file and run all commands. This may take a long time. We expect
	// the user to cancel or time to run out before we finish, so we fuzz the files
	// in order of recent edits, and handle timeout/cancel gracefully.
	for _, f := range files {
		if ctx.Err() != nil {
			break
		}

		if !shouldFuzzFile(f.name) {
			continue
		}

		g, err := fuzzAndRun(ctx, cmds, ws.Root(), f.name)
		if err != nil {
			return nil, err
		}

		if len(g.Logs) != 0 {
			result = append(result, g)
		}
	}

	return result, nil
}

// Create an "init" group that runs all the commands in the current workspace.
func runInitGroup(ctx context.Context, cmds []WatCommand, root string, recentEdit string) (CommandLogGroup, error) {
	fmt.Fprintln(os.Stderr, "Running all tests in the current workspace")
	return runCmdsWithProgress(ctx, cmds, root, LogContext{
		StartTime:   time.Now(),
		Source:      LogSourceTrainInit,
		RecentEdits: []string{recentEdit},
	})
}

func runCmdsWithProgress(ctx context.Context, cmds []WatCommand, root string, logCtx LogContext) (CommandLogGroup, error) {
	g := CommandLogGroup{
		Context: logCtx,
	}
	bar := pb.New(len(cmds))
	bar.Output = os.Stderr
	bar.Start()
	defer bar.FinishPrint("")

	for i, cmd := range cmds {
		l, err := runCmdAndLog(ctx, root, cmd, ioutil.Discard, ioutil.Discard)
		if err != nil {
			if err == context.DeadlineExceeded || err == context.Canceled {
				break
			}
			return CommandLogGroup{}, err
		}
		g.Logs = append(g.Logs, l)
		bar.Set(i + 1)
	}

	return g, nil
}

func shouldFuzzFile(fileToFuzz string) bool {
	for _, suffix := range fuzzSuffixes {
		if strings.HasSuffix(fileToFuzz, suffix) {
			return true
		}
	}
	return false
}

// A dumb mutation: replace false with true and 0 with 1.
func fuzz(contents []byte) []byte {
	contents = matchFalse.ReplaceAll(contents, []byte("true"))
	contents = matchZero.ReplaceAll(contents, []byte("1"))
	return contents
}

// Make a random edit to a file and run all tests in the workspace.
func fuzzAndRun(ctx context.Context, cmds []WatCommand, root, fileToFuzz string) (CommandLogGroup, error) {
	absPath := filepath.Join(root, fileToFuzz)
	oldContents, err := ioutil.ReadFile(absPath)
	if err != nil {
		return CommandLogGroup{}, err
	}

	newContents := fuzz(oldContents)
	if bytes.Equal(newContents, oldContents) {
		// if fuzzing does nothing, don't bother.
		return CommandLogGroup{}, nil
	}

	// We know the file exists, so we expect that this file mode will be ignored
	mode := permFile
	err = ioutil.WriteFile(absPath, newContents, mode)
	if err != nil {
		return CommandLogGroup{}, err
	}

	// Reset the old contents when done
	defer ioutil.WriteFile(absPath, oldContents, mode)

	_, _ = fmt.Fprintf(os.Stderr, "Fuzzing %q and running all tests\n", fileToFuzz)
	return runCmdsWithProgress(ctx, cmds, root, LogContext{
		StartTime:   time.Now(),
		Source:      LogSourceFuzz,
		RecentEdits: []string{fileToFuzz},
	})
}

func newBootstrapGroup(recentEdits []string, cmds []WatCommand, successFn func(cmd WatCommand) bool) CommandLogGroup {
	g := newCommandLogGroup(newLogContext(recentEdits))
	for _, cmd := range cmds {
		g.Add(newBootstrapLog(cmd, successFn(cmd)))
	}
	return *g
}

func newLogContext(recentEdits []string) LogContext {
	return LogContext{
		Source:      LogSourceBootstrap,
		StartTime:   time.Now(),
		RecentEdits: recentEdits,
	}
}

func newBootstrapLog(cmd WatCommand, success bool) CommandLog {
	return CommandLog{
		Command: cmd.Command,
		Success: success,

		// Assume every test command takes a millisecond.
		// This is a dumb assumption but will get quickly corrected
		// as we get new data, because we will explore fast commands first.
		Duration: time.Millisecond,
	}
}
